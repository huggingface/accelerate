name: Manual Workflow Trigger

on:
  issue_comment:
    types: [created, edited]

jobs:
  process-comment:
    runs-on: ubuntu-latest
    if: startsWith(github.event.comment.body, '!run')
    
    steps:
      - name: Check if commenter has write access
        id: check_permissions
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });
            return response.data.permission === 'admin' || response.data.permission === 'write';

      - name: Get PR details
        if: steps.check_permissions.outputs.result == 'true'
        id: pr_details
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              head_sha: pr.head.sha,
              head_ref: pr.head.ref,
              head_repo: pr.head.repo.full_name
            }

      - name: Parse workflow name
        if: steps.check_permissions.outputs.result == 'true'
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          WORKFLOW_NAME=$(echo "$COMMENT" | awk -F'\n' '/^!run/ {sub(/^!run */, ""); print $1; exit}')
          echo "workflow=$WORKFLOW_NAME" >> $GITHUB_OUTPUT

      - name: Checkout PR code
        if: steps.check_permissions.outputs.result == 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ fromJson(steps.pr_details.outputs.result).head_repo }}
          ref: ${{ fromJson(steps.pr_details.outputs.result).head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run workflow and monitor
        if: steps.check_permissions.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const workflow = '${{ steps.parse.outputs.workflow }}';
            const prDetails = JSON.parse('${{ steps.pr_details.outputs.result }}');
            let commentId = null;
            
            try {
              // Run the workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: `${workflow}.yml`,
                ref: prDetails.head_ref
              });
              
              // Create initial comment
              const initialComment = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `Triggered workflow: ${workflow}\nUsing code from: ${prDetails.head_repo}@${prDetails.head_ref}\nWaiting for results...`
              });
              commentId = initialComment.data.id;

              // Wait for workflow to start (give it 30 seconds)
              await new Promise(resolve => setTimeout(resolve, 30000));

              // Monitor the workflow until completion
              let isComplete = false;
              while (!isComplete) {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: `${workflow}.yml`,
                  head_sha: prDetails.head_sha,
                  per_page: 1
                });

                if (runs.data.workflow_runs.length > 0) {
                  const run = runs.data.workflow_runs[0];
                  if (run.status === 'completed') {
                    await github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: commentId,
                      body: `Workflow ${workflow} completed with status: ${run.conclusion}\nRun details: ${run.html_url}`
                    });
                    isComplete = true;
                  }
                }

                if (!isComplete) {
                  await new Promise(resolve => setTimeout(resolve, 30000)); // Check every 30 seconds
                }
              }
              
            } catch (error) {
              const errorMessage = `Error with workflow: ${error.message}`;
              if (commentId) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentId,
                  body: errorMessage
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: errorMessage
                });
              }
            }