name: Manual Workflow Trigger

on:
  issue_comment:
    types: [created, edited]

jobs:
  process-comment:
    runs-on: ubuntu-latest
    if: startsWith(github.event.comment.body, '!run')
    
    steps:
      - name: Check if commenter has write access
        id: check_permissions
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });
            return response.data.permission === 'admin' || response.data.permission === 'write';

      - name: Get PR details
        if: steps.check_permissions.outputs.result == 'true'
        id: pr_details
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              head_sha: pr.head.sha,
              head_ref: pr.head.ref,
              head_repo: pr.head.repo.full_name
            }
      - name: Parse workflow name
        if: steps.check_permissions.outputs.result == 'true'
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          WORKFLOW_NAME=$(echo "$COMMENT" | awk -F'\n' '/^!run/ {sub(/^!run */, ""); print $1; exit}')
          echo "workflow=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
      - name: Echo workflow name
        if: steps.check_permissions.outputs.result == 'true'
        run: |
          echo "Workflow to run: ${{ steps.parse.outputs.workflow }}"

      - name: Trigger workflow
        if: steps.check_permissions.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const workflow = '${{ steps.parse.outputs.workflow }}';
            const prDetails = JSON.parse('${{ steps.pr_details.outputs.result }}');
            
            try {
              // Trigger the workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: `${workflow}.yml`,
                ref: prDetails.head_ref,
                inputs: {
                  repository: prDetails.head_repo,
                  ref: prDetails.head_sha
                }
              });
              
              // Handle the success message
              const message = `Triggered workflow: ${workflow}\nWaiting for results...`;
              await updateOrCreateComment(message);
              
            } catch (error) {
              // Handle any errors
              const errorMessage = `Error triggering workflow: ${error.message}`;
              await updateOrCreateComment(errorMessage);
            }

            // Helper function to update or create comments
            async function updateOrCreateComment(message) {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('Triggered workflow:')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: message
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                });
              }
            }